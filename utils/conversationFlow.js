const { sendMsg } = require('../services/whatsappService');
const { createBooking } = require('../services/bookingService');

// üëá Replace with your real doctor/clinic data from DB or API
const clinics = [
  { id: 'c1', name: '‡∑Ñ‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂≠‡∑ú‡∂ß ‡∂¥‡∑ä‚Äç‡∂ª‡∑è‡∂Æ‡∂∏‡∑í‡∂ö ‡∑É‡∑û‡∂õ‡∑ä‚Äç‡∂∫ ‡∂∏‡∂∞‡∑ä‚Äç‡∂∫‡∑É‡∑ä‡∂Æ‡∑è‡∂±‡∂∫', name_en: 'Hambantota PHC' },
  { id: 'c2', name: '‡∂∏‡∑ú‡∂´‡∂ª‡∑è‡∂ú‡∂Ω ‡∂¥‡∑ä‚Äç‡∂ª‡∑è. ‡∑É‡∑û‡∂õ‡∑ä‚Äç‡∂∫ ‡∂ö‡∑ö‡∂±‡∑ä‡∂Ø‡∑ä‚Äç‡∂ª‡∂∫', name_en: 'Monaragala MC' }
];

const doctors = [
  { id: 'd1', name: '‡∂©‡∑ú. ‡∂¥‡∑ô‡∂ª‡∑ö‡∂ª‡∑è (‡∑É‡∑è‡∂∏‡∑è‡∂±‡∑ä‚Äç‡∂∫)', clinicId: 'c1', name_en: 'Dr. Perera (GP)' },
  { id: 'd2', name: '‡∂©‡∑ú. ‡∑É‡∑í‡∂Ω‡∑ä‡∑Ä‡∑è (‡∑Ö‡∂Ø‡∂ª‡∑î)', clinicId: 'c1', name_en: 'Dr. Silva (Pediatric)' }
];

const slots = ['10:00', '11:00', '14:00'];

let userState = {};

// üí¨ Sinhala Messages
const sinhala = {
  welcome: "üè• ‡∂Ü‡∂∫‡∑î‡∂∂‡∑ù‡∑Ä‡∂±‡∑ä! '‡∑Ä‡∑õ‡∂Ø‡∑ä‚Äç‡∂∫ ‡∂ú‡∑î‡∂ª‡∑î' ‡∂∫‡∂±‡∑î ‡∂ß‡∂∫‡∑í‡∂¥‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±",
  choose_clinic: "üìç ‡∑É‡∑û‡∂õ‡∑ä‚Äç‡∂∫ ‡∂∏‡∂∞‡∑ä‚Äç‡∂∫‡∑É‡∑ä‡∂Æ‡∑è‡∂±‡∂∫ ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±:",
  choose_doctor: "üë®‚Äç‚öïÔ∏è ‡∑Ä‡∑õ‡∂Ø‡∑ä‚Äç‡∂∫‡∑Ä‡∂ª‡∂∫‡∑è ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±:",
  choose_slot: "üïí ‡∑Ä‡∑ö‡∂Ω‡∑è‡∑Ä ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±:",
  confirm: "üìÑ ‡∂î‡∂∂‡∂ú‡∑ö ‡∂ú‡∑ê‡∑Ö‡∑Ä‡∑ì‡∂∏ ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±?",
  confirmed: "‚úÖ ‡∂ú‡∑ê‡∑Ö‡∑Ä‡∑ì‡∂∏ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í!",
  error: "‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑í‡∂∫. ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±."
};

exports.handleUserMessage = async (from, text) => {
  const state = userState[from] || { step: 'start' };

  try {
    // üåø AI Symptom Checker - Always check first
    if (text.includes('symptoms') || text.includes('‡∂ª‡∑ù‡∂ú ‡∂Ö‡∑Ä‡∑É‡∑ä‡∂Æ‡∑è‡∑Ä') || text.includes('symptom') || text.includes('‡∂Ö‡∑Ä‡∑É‡∑ä‡∂Æ‡∑è‡∑Ä')) {
      await sendMsg(from, "‡∂î‡∂∂‡∂ß ‡∂ö‡∑î‡∂∏‡∂± ‡∂ª‡∑ù‡∂ú ‡∂Ω‡∂ö‡∑ä‡∑Ç‡∂´ ‡∂Ø‡∂ö‡∑ä‡∂±‡∂ß ‡∂Ω‡∑ê‡∂∂‡∑ö‡∂Ø? (‡∂ã‡∂Ø‡∑è: ‡∂ã‡∂´, ‡∂ö‡∑ê‡∑É‡∑ä‡∑É, ‡∑Ä‡∂∏‡∂±‡∂∫)");
      userState[from] = { step: 'awaiting_symptoms' };
      return;
    }

    // If user is in symptom flow
    if (state.step === 'awaiting_symptoms') {
      let reply = "‡∂î‡∂∂‡∂ß ";
      if (text.includes('‡∂ã‡∂´') && text.includes('‡∂ö‡∑ê‡∑É‡∑ä‡∑É')) {
        reply += "‡∂©‡∑ô‡∂±‡∑ä‡∂ú‡∑î ‡∑Ñ‡∑ù ‡∂â‡∂±‡∑ä‡∑Ü‡∑í‡∂Ω‡∑î‡∂ë‡∂±‡∑ä‡∑É‡∑è ‡∑Ä‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫. ‡∑Ä‡∑õ‡∂Ø‡∑ä‚Äç‡∂∫ ‡∂ú‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.";
      } else if (text.includes('‡∑Ä‡∂∏‡∂±‡∂∫') || text.includes('‡∑Ä‡∂∏‡∂±')) {
        reply += "‡∂¢‡∂Ω ‡∂Ø‡∑ê‡∂Ω‡∑ä‡∑Ä‡∑ì‡∂∏ ‡∑Ä‡∑Ö‡∂ö‡∑ä‡∑Ä‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂Ø‡∑ä‚Äç‡∂ª‡∑Ä ‡∂∂‡∑ú‡∂±‡∑ä‡∂±. ‡∑Ä‡∑õ‡∂Ø‡∑ä‚Äç‡∂∫ ‡∂ú‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.";
      } else if (text.includes('‡∑Ä‡∑ö‡∂Ø‡∂±‡∑è‡∑Ä') || text.includes('‡∂¥‡∑í‡∑Ö‡∑í‡∂ö‡∑è')) {
        reply += "‡∂ö‡∑è‡∂Ω‡∂∫ ‡∂Ö‡∂≠‡∑í ‡∑Ä‡∑ê‡∂Ø‡∂ú‡∂≠‡∑ä‡∂∫. ‡∑Ä‡∑Ñ‡∑è‡∂∏ ‡∑Ä‡∑õ‡∂Ø‡∑ä‚Äç‡∂∫ ‡∂ú‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.";
      } else {
        reply += "‡∑É‡∑è‡∂∏‡∑è‡∂±‡∑ä‚Äç‡∂∫ ‡∂ª‡∑ù‡∂ú‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö. ‡∑Ä‡∑õ‡∂Ø‡∑ä‚Äç‡∂∫ ‡∂ú‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.";
      }
      await sendMsg(from, reply);
      userState[from] = { step: 'start' }; // Reset
      return;
    }

    // ‚úÖ Normal Booking Flow
    if (text.includes('book doctor') || text.includes('‡∑Ä‡∑õ‡∂Ø‡∑ä‚Äç‡∂∫ ‡∂ú‡∑î‡∂ª‡∑î') || text.includes('‡Æü‡Ææ‡Æï‡Øç‡Æü‡Æ∞‡Øç ‡Æ™‡ØÅ‡Æï‡Øç') || text === '1') {
      state.step = 'choose_clinic';
      let msg = sinhala.choose_clinic + "\n";
      clinics.forEach((c, i) => msg += `${i+1}. ${c.name}\n`);
      await sendMsg(from, msg);
      userState[from] = state;
      return;
    }

    if (state.step === 'choose_clinic') {
      const idx = parseInt(text) - 1;
      if (idx >= 0 && idx < clinics.length) {
        state.clinicId = clinics[idx].id;
        state.step = 'choose_doctor';
        const availableDocs = doctors.filter(d => d.clinicId === state.clinicId);
        let msg = sinhala.choose_doctor + "\n";
        availableDocs.forEach((d, i) => msg += `${i+1}. ${d.name}\n`);
        await sendMsg(from, msg);
        userState[from] = state;
      } else {
        await sendMsg(from, "‚ùå ‡∂±‡∑ú‡∑Ä‡∑ê‡∂Ω‡∑ê‡∂≠‡∑ä‡∂≠‡∑è.");
      }
      return;
    }

    if (state.step === 'choose_doctor') {
      const idx = parseInt(text) - 1;
      const availableDocs = doctors.filter(d => d.clinicId === state.clinicId);
      if (idx >= 0 && idx < availableDocs.length) {
        state.doctorId = availableDocs[idx].id;
        state.step = 'choose_slot';
        let msg = sinhala.choose_slot + "\n";
        slots.forEach((s, i) => msg += `${i+1}. ${s}\n`);
        await sendMsg(from, msg);
        userState[from] = state;
      } else {
        await sendMsg(from, "‚ùå ‡∂±‡∑ú‡∑Ä‡∑ê‡∂Ω‡∑ê‡∂≠‡∑ä‡∂≠‡∑è.");
      }
      return;
    }

    if (state.step === 'choose_slot') {
      const idx = parseInt(text) - 1;
      if (idx >= 0 && idx < slots.length) {
        state.time = slots[idx];
        state.date = new Date().toISOString().split('T')[0];
        state.step = 'confirm';
        const doctor = doctors.find(d => d.id === state.doctorId);
        const clinic = clinics.find(c => c.id === state.clinicId);
        const msg = `${sinhala.confirm}\n‡∑Ä‡∑õ‡∂Ø‡∑ä‚Äç‡∂∫‡∑Ä‡∂ª‡∂∫‡∑è: ${doctor.name}\n‡∑É‡∑ä‡∂Æ‡∑è‡∂±‡∂∫: ${clinic.name}\n‡∂Ø‡∑í‡∂±‡∂∫: ${state.date}\n‡∑Ä‡∑ö‡∂Ω‡∑è‡∑Ä: ${state.time}\n\nYES ‡∂∫‡∂±‡∑î ‡∂ß‡∂∫‡∑í‡∂¥‡∑ä ‡∂ö‡∂ª ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.`;
        await sendMsg(from, msg);
        userState[from] = state;
      } else {
        await sendMsg(from, "‚ùå ‡∂±‡∑ú‡∑Ä‡∑ê‡∂Ω‡∑ê‡∂≠‡∑ä‡∂≠‡∑è.");
      }
      return;
    }

    if (state.step === 'confirm' && text.toLowerCase() === 'yes') {
      const doctor = doctors.find(d => d.id === state.doctorId);
      const bookingData = {
        patient_phone: from,
        doctor_id: state.doctorId,
        clinic_id: state.clinicId,
        date: state.date,
        time: state.time,
        source: 'whatsapp'
      };

      await createBooking(bookingData);

      const clinic = clinics.find(c => c.id === state.clinicId);
      await sendMsg(from, `${sinhala.confirmed}\n${doctor.name}\n${clinic.name}\n${state.date} ${state.time}\n‡∂∏‡∑ô‡∂∏ ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∑Å‡∑ù‡∂∞‡∂±‡∂∫‡∑ö‡∂Ø‡∑ì ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂±‡∑ä‡∂±.`);

      delete userState[from];
      return;
    }

    // Default fallback
    await sendMsg(from, sinhala.welcome);

  } catch (err) {
    await sendMsg(from, sinhala.error);
    console.error('Bot error:', err);
  }
};