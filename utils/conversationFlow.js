

// utils/conversationFlow.js
const axios = require("axios");
const { sendMsg } = require("../services/whatsappService");
const { createBooking } = require("../services/bookingService");

// Store per-user conversation state
let userState = {};

// Language menus
const languages = {
  1: { code: "si", label: "‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω" },
  2: { code: "en", label: "English" },
  3: { code: "ta", label: "‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç" }
};

// Translations (system prompts)
const prompts = {
  en: {
    chooseLang: "üåê Please select your preferred language:\n1. Sinhala\n2. English\n3. Tamil",
    chooseDoctor: "üë®‚Äç‚öïÔ∏è Please choose a doctor:",
    chooseDisp: "üè• Please choose a dispensary:",
    confirm: "‚úÖ Confirm your booking?",
    error: "‚ùå Invalid choice. Please try again."
  },
  si: {
    chooseLang: "üåê ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂î‡∂∂‡∑ö ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±:\n1. ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω\n2. English\n3. ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç",
    chooseDoctor: "üë®‚Äç‚öïÔ∏è ‡∑Ä‡∑õ‡∂Ø‡∑ä‚Äç‡∂∫‡∑Ä‡∂ª‡∂∫‡∑è ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±:",
    chooseDisp: "üè• ‡∂ª‡∑ù‡∑Ñ‡∂Ω ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±:",
    confirm: "‚úÖ ‡∂î‡∂∂‡∂ú‡∑ö ‡∑Ä‡∑ô‡∂±‡∑ä‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±?",
    error: "‚ùå ‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏‡∂ö‡∑í. ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±."
  },
  ta: {
    chooseLang: "üåê ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Øä‡Æ¥‡Æø‡ÆØ‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç:\n1. ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω\n2. English\n3. ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç",
    chooseDoctor: "üë®‚Äç‚öïÔ∏è ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æ∞‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç:",
    chooseDisp: "üè• ‡ÆÆ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡Æï‡Æ§‡Øç‡Æ§‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç:",
    confirm: "‚úÖ ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡Æ§‡Æø‡Æµ‡Øà ‡Æâ‡Æ±‡ØÅ‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æµ‡Ææ?",
    error: "‚ùå ‡Æ§‡Æµ‡Æ±‡Ææ‡Æ© ‡Æ§‡Øá‡Æ∞‡Øç‡Æµ‡ØÅ. ‡ÆÆ‡ØÄ‡Æ£‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡ÆØ‡Æ±‡Øç‡Æö‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç."
  }
};

exports.handleUserMessage = async (from, text) => {
  let state = userState[from] || { step: "start" };
  const lang = state.lang || "en"; // default English

  try {
    // Step 1: Start booking
    if (text.toLowerCase() === "book doctor") {
      state.step = "chooseLang";
      userState[from] = state;
      return await sendMsg(from, prompts.en.chooseLang); // show in English always
    }

    // Step 2: Choose language
    if (state.step === "chooseLang") {
      if (languages[text]) {
        state.lang = languages[text].code;
        state.step = "chooseDoctor";

        // Fetch doctors from API
        const res = await axios.get(`${process.env.API_URL}/doctors`);
        state.availableDocs = res.data;

        let msg = prompts[state.lang].chooseDoctor + "\n";
        state.availableDocs.forEach((d, i) => {
          msg += `${i + 1}. ${d.name}\n`;
        });

        userState[from] = state;
        return await sendMsg(from, msg);
      } else {
        return await sendMsg(from, prompts[lang].error);
      }
    }

    // Step 3: Choose doctor
    if (state.step === "chooseDoctor") {
      const idx = parseInt(text) - 1;
      if (state.availableDocs && idx >= 0 && idx < state.availableDocs.length) {
        const doctor = state.availableDocs[idx];
        state.doctorId = doctor._id;
        state.step = "chooseDisp";

        // Fetch dispensaries for this doctor
        const res = await axios.get(
          `${process.env.API_URL}/dispensaries/doctor/${doctor._id}`
        );
        state.availableDisps = res.data;

        let msg = prompts[state.lang].chooseDisp + "\n";
        state.availableDisps.forEach((d, i) => {
          msg += `${i + 1}. ${d.name}\n`;
        });

        userState[from] = state;
        return await sendMsg(from, msg);
      } else {
        return await sendMsg(from, prompts[lang].error);
      }
    }

    // Step 4: Choose dispensary
    if (state.step === "chooseDisp") {
      const idx = parseInt(text) - 1;
      if (state.availableDisps && idx >= 0 && idx < state.availableDisps.length) {
        const disp = state.availableDisps[idx];
        state.dispId = disp._id;
        state.step = "confirm";

        const doctor = state.availableDocs.find(d => d._id === state.doctorId);

        const msg = `${prompts[state.lang].confirm}\n\nDoctor: ${doctor.name}\nDispensary: ${disp.name}\n\nReply YES to confirm.`;
        userState[from] = state;
        return await sendMsg(from, msg);
      } else {
        return await sendMsg(from, prompts[lang].error);
      }
    }

    // Step 5: Confirm booking
    if (state.step === "confirm" && text.toLowerCase() === "yes") {
      const bookingData = {
        patient_phone: from,
        doctor_id: state.doctorId,
        clinic_id: state.dispId,
        source: "whatsapp"
      };

      await createBooking(bookingData);

      await sendMsg(from, "üéâ Booking confirmed! Thank you.");
      delete userState[from];
      return;
    }

    // Default: reset
    return await sendMsg(from, prompts[lang].error);

  } catch (err) {
    console.error("‚ùå Conversation flow error:", err);
    await sendMsg(from, prompts[lang].error);
  }
};
